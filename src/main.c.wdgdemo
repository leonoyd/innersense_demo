#include <stdint.h>
#include <main.h>
/**
  * @brief  System Clock Configuration
  *         The system Clock is configured as follow :
  *            System Clock source            = PLL (HSI)
  *            SYSCLK(Hz)                     = 64000000
  *            HCLK(Hz)                       = 64000000
  *            AHB Prescaler                  = 1
  *            APB1 Prescaler                 = 2
  *            APB2 Prescaler                 = 1
  *            HSI Frequency(Hz)              = 8000000
  *            PREDIV                         = RCC_PREDIV_DIV2 (2)
  *            PLLMUL                         = RCC_PLL_MUL16 (16)
  *            Flash Latency(WS)              = 2
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* HSI Oscillator already ON after system reset, activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
  {
    /* Initialization Error */
    while(1);
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
  {
    /* Initialization Error */
    while(1);
  }
}
#define WDT_OFFSET 0x40003000

#define OFFSET_OF(s)

typedef struct {
    volatile int32_t key;
    volatile int32_t prescaler;
    volatile int32_t reload;
    volatile int32_t status;
    volatile int32_t window;
} WdtRegisters;

#if 0
WdtRegisters wdt_reg = {
    .key = (volatile uint32_t*) (WDT_OFFSET + 0),
    .prescaler = (volatile uint32_t*) (WDT_OFFSET + 4),
    .reload = (volatile uint32_t*) (WDT_OFFSET + 8),
    .status = (volatile uint32_t*) (WDT_OFFSET + 12),
    .window = (volatile uint32_t*) (WDT_OFFSET + 16)
};
#endif

WdtRegisters* wdt_reg;

void iwdg_reset()
{
    wdt_reg->key = 0x0000AAAA;
}

void iwdg_init()
{
    wdt_reg = (WdtRegisters*) 0x40003000;
    wdt_reg->key = 0x0000CCCC; // Enable IWDG
    wdt_reg->key = 0x00005555; // Enable register access
    wdt_reg->reload = 0x00000C35;
    wdt_reg->prescaler = 5;
    while (wdt_reg->status != 0);
}

void main(void)
{
    HAL_Init();

    /* Configure the system clock to 64 MHz */
    SystemClock_Config();
    iwdg_init();

    while (1) {
        HAL_Delay(12000);
        iwdg_reset();
    }
}
